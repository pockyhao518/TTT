{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","i","squares","renderSquare","Game","state","history","Array","fill","xIsNext","stepNumber","length","slice","calculateWin","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"4MAIMA,E,4JAOF,WAAU,IAAD,OACL,OACI,wBAAQC,UAAU,SAClBC,QAAS,kBAAK,EAAKC,MAAMD,WADzB,SAGKE,KAAKD,MAAME,Y,GAZPC,IAAMC,WAkBrBC,E,kKAqBF,SAAaC,GAAI,IAAD,OACZ,OAAO,cAACT,EAAD,CAAQK,MAAOD,KAAKD,MAAMO,QAAQD,GACjCP,QAAS,kBAAI,EAAKC,MAAMD,QAAQO,Q,oBAG5C,WASI,OACI,gCAEI,sBAAKR,UAAU,YAAf,UACKG,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAEvB,sBAAKV,UAAU,YAAf,UACKG,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAEvB,sBAAKV,UAAU,YAAf,UACKG,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,a,GAnDnBL,IAAMC,WA0DpBK,E,kDACF,WAAYT,GAAO,IAAD,8BACd,cAAMA,IACDU,MAAQ,CACTC,QAAS,CAAC,CACNJ,QAASK,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPF,E,+CAWlB,SAAYT,GACR,IAAMK,EAAUV,KAAKS,MAAMC,QAErBJ,EADUI,EAAQA,EAAQK,OAAS,GACjBT,QAAQU,QAC5BC,EAAaX,IAAYA,EAAQD,KAGrCC,EAAQD,GAAKL,KAAKS,MAAMI,QAAU,IAAM,IACxCb,KAAKkB,SAAS,CACVR,QAASA,EAAQS,OAAO,CAAC,CAACb,QAAQA,KAClCO,SAAUb,KAAKS,MAAMI,QACrBC,WAAYJ,EAAQK,Y,oBAI5B,SAAOK,GACHpB,KAAKkB,SAAS,CACVJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,oBAIhC,WAAU,IAgBFC,EAhBC,OACCX,EAAUV,KAAKS,MAAMC,QACrBY,EAAUZ,EAAQV,KAAKS,MAAMK,YAE7BS,EAASN,EAAaK,EAAQhB,SAE9BkB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACb,gBAAkBA,EAClB,mBACA,OACI,6BACI,wBAAQ5B,QAAS,kBAAI,EAAK8B,OAAOF,IAAjC,SAAyCC,KADpCD,MAWjB,OAJIL,EADAE,EACS,aAAeA,EAElB,uBAAmBvB,KAAKS,MAAMI,QAAU,IAAM,KAGpD,sBAAKhB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACO,EAAD,CACAE,QAASgB,EAAQhB,QAEjBR,QAAS,SAACO,GAAK,EAAKwB,YAAYxB,QAEpC,sBAAKR,UAAU,YAAf,UACI,8BAAMwB,IACN,6BAAKG,c,GAlENtB,IAAMC,WAgFzB,SAASc,EAAaX,GAWlB,IAVA,IAAMwB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFzB,EAAI,EAAGA,EAAIyB,EAAMf,OAAQV,IAAI,CAAC,IAAD,cAClByB,EAAMzB,GADY,GAC3B0B,EAD2B,KACzBC,EADyB,KACvBC,EADuB,KAElC,GAAI3B,EAAQyB,IAAMzB,EAAQyB,KAAOzB,EAAQ0B,IAAM1B,EAAQyB,KAAOzB,EAAQ2B,GAClE,OAAO3B,EAAQyB,GAGvB,OAAO,KAtBXG,IAASC,OACL,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.9cf89f72.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Square extends React.Component {\n    // constructor(props){\n    //     super(props);\n    //     this.state = {\n    //         value: null\n    //     }\n    // }\n    render() {\n        return (\n            <button className=\"square\"\n            onClick={()=> this.props.onClick()}\n            >\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    // constructor(props){\n    //     super(props);\n    //     this.state = {\n    //         Squares: Array(9).fill(null),\n    //         xIsNext: true\n    //     }\n    // }\n\n    // handleClick(i){\n    //     const squares = this.state.Squares.slice()\n    //     if (calculateWin(squares) || squares[i]){\n    //         return;\n    //     }\n    //     squares[i] = this.state.xIsNext? 'X':'O';\n    //     this.setState({\n    //         Squares:squares,\n    //         xIsNext: !this.state.xIsNext\n    //     })\n    // }\n\n    renderSquare(i) {\n        return <Square value={this.props.squares[i]}\n                onClick={()=>this.props.onClick(i)} />;\n    }\n\n    render() {\n        // const winner = calculateWin(this.state.Squares)\n        // let status;\n        // if (winner){\n        //     status = 'Winner is ' + winner;\n        // }else{\n        //     status = `Next player: ${this.state.xIsNext? 'X' : 'O'}`;\n        // }\n\n        return (\n            <div>\n                {/* <div className=\"status\">{this.props.status}</div> */}\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            xIsNext: true,\n            stepNumber: 0\n        }\n    }\n\n    handleClick(i){\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWin(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{squares:squares}]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        })\n    }\n\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        })\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        // const squares = current.squares.slice();\n        const winner = calculateWin(current.squares)\n\n        const moves = history.map((step, move)=>{\n            const desc = move?\n            'Go to move # ' + move :\n            'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={()=>this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n        let status;\n        if (winner) {\n            status = 'Winner is ' + winner;\n        } else {\n            status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                    squares={current.squares}\n                        // status={status}\n                    onClick={(i)=>{this.handleClick(i)}}/>\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWin(squares){\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ]\n    for (let i = 0; i < lines.length; i++){\n        const [a,b,c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}